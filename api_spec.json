{
  "openapi": "3.0.3",
  "info": {
    "title": "Online Learning RESTful API",
    "description": "RESTful API Specification For Online Learning Backend Application",
    "version": "1.0.0",
    "contact": {
      "name": "Fikran Akbar",
      "email": "fikranakbar756@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://{environment}/api",
      "variables": {
        "environment": {
          "default": "localhost:8000",
          "description": "Online Learning RESTful API Server",
          "enum": [
            "localhost:8000"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication such login, register, logout"
    }
  ],
  "externalDocs": {
    "description": "Fikran Akbar's Github",
    "url": "https://github.com/FikranAkbar"
  },
  "paths": {
    "/users/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login user with email and password",
        "description": "Login user with registered email and password. The API will return token to access protected route",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "required": true
                  }
                }
              },
              "example": {
                "email": "fikranakbar756@gmail.com",
                "password": "password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "token": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "status": "200",
                  "message": "OK",
                  "data": {
                    "email": "fikranakbar756@gmail.com",
                    "name": "Fikran Akbar",
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiRmlrcmFuIEFrYmFyIiwiZW1haWwiOiJmaWtyYW5ha2Jhcjc1NkBnbWFpbC5jb20ifQ._tSgZvD3rl9gBwunH4JgwcHn1adyTMYSR6N2uHuWsqw"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Login failed. Email and password must be filled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "message": "BAD REQUEST",
                  "data": "Login failed. Email must be type of email. Email and password must be filled"
                }
              }
            }
          },
          "403": {
            "description": "Login failed. Wrong email or password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "null"
                    }
                  }
                },
                "example": {
                  "status": 403,
                  "message": "FORBIDDEN",
                  "data": "Login failed. Wrong email or password"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500-InternalServerError"
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register user with email, password, name, date_birth, gender",
        "description": "Register user with email, password, name, date_birth, gender. This API will not auto-login the user, so will not return token for accessed protected route",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "required": true,
                    "minLength": 8
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100,
                    "required": true
                  },
                  "date_birth": {
                    "type": "string",
                    "required": true
                  },
                  "gender": {
                    "type": "string",
                    "enum": ["Male", "Female"]
                  }
                }
              },
              "example": {
                "email": "fikranakbar756@gmail.com",
                "password": "password",
                "name": "Fikran Akbar",
                "date_birth": "2000-07-01",
                "gender": "Male"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Register user successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "status": 200,
                  "message": "OK",
                  "data": {
                    "id": 1,
                    "name": "Fikran Akbar",
                    "email": "fikranakbar756@gmail.com"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Register user failed. All field must be filled or the given data was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Email error": {
                    "value": {
                      "status": 400,
                      "message": "BAD REQUEST",
                      "data": "Register failed. Email must be type of email"
                    }
                  },
                  "Password minimum length error": {
                    "value": {
                      "status": 400,
                      "message": "BAD REQUEST",
                      "data": "Register failed. Password must be 8 character minimum"
                    }
                  },
                  "Empty field error": {
                    "value": {
                      "status": 400,
                      "message": "BAD REQUEST",
                      "data": "Register failed. All field must be filled"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500-InternalServerError"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout user with JSON Web Token (JWT)",
        "description": "Logout user with JSON Web Token (JWT)",
        "responses": {
          "200": {
            "description": "Logout success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "null"
                    }
                  }
                },
                "example": {
                  "status": 200,
                  "message": "OK",
                  "data": null
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500-InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "401-Unauthorized": {
        "description": "Unauthorized, Token already expired",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "null"
                }
              }
            },
            "example": {
              "status": 401,
              "message": "UNAUTHORIZED",
              "data": null
            }
          }
        }
      },
      "500-InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "string"
                }
              }
            },
            "example": {
              "status": 500,
              "message": "INTERNAL SERVER ERROR",
              "data": "Error detail"
            }
          }
        }
      }
    }
  }
}
