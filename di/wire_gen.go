// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"online-learning-restful-api/app"
	"online-learning-restful-api/app/database"
	"online-learning-restful-api/controller/authentication_controller"
	"online-learning-restful-api/controller/course_controller"
	"online-learning-restful-api/repository/account_repository"
	"online-learning-restful-api/repository/category_repository"
	"online-learning-restful-api/repository/course_repository"
	"online-learning-restful-api/repository/user_repository"
	"online-learning-restful-api/service/authentication_service"
	"online-learning-restful-api/service/course_service"
)

// Injectors from injector.go:

func InitializedEchoServer() *echo.Echo {
	accountRepositoryImpl := account_repository.NewAccountRepositoryImpl()
	userRepositoryImpl := user_repository.NewUserRepositoryImpl()
	db := database.NewDB()
	validate := validator.New()
	authenticationServiceImpl := authentication_service.NewAuthenticationServiceImpl(accountRepositoryImpl, userRepositoryImpl, db, validate)
	authenticationControllerImpl := authentication_controller.NewAuthenticationControllerImpl(authenticationServiceImpl)
	categoryRepositoryImpl := category_repository.NewCategoryRepositoryImpl()
	courseCategoryServiceImpl := course_service.NewCourseCategoryServiceImpl(categoryRepositoryImpl, db)
	courseCategoryControllerImpl := course_controller.NewCourseCategoryControllerImpl(courseCategoryServiceImpl)
	courseRepositoryImpl := course_repository.NewCourseRepositoryImpl()
	coursePopularServiceImpl := course_service.NewCoursePopularServiceImpl(courseRepositoryImpl, db)
	coursePopularControllerImpl := course_controller.NewCoursePopularControllerImpl(coursePopularServiceImpl)
	courseServiceImpl := course_service.NewCourseServiceImpl(courseRepositoryImpl, db)
	courseControllerImpl := course_controller.NewCourseControllerImpl(courseServiceImpl)
	echoEcho := app.InitServerWithEcho(authenticationControllerImpl, courseCategoryControllerImpl, coursePopularControllerImpl, courseControllerImpl)
	return echoEcho
}

func InitializedEchoServerForTest() *echo.Echo {
	accountRepositoryImpl := account_repository.NewAccountRepositoryImpl()
	userRepositoryImpl := user_repository.NewUserRepositoryImpl()
	db := database.NewTestDB()
	validate := validator.New()
	authenticationServiceImpl := authentication_service.NewAuthenticationServiceImpl(accountRepositoryImpl, userRepositoryImpl, db, validate)
	authenticationControllerImpl := authentication_controller.NewAuthenticationControllerImpl(authenticationServiceImpl)
	categoryRepositoryImpl := category_repository.NewCategoryRepositoryImpl()
	courseCategoryServiceImpl := course_service.NewCourseCategoryServiceImpl(categoryRepositoryImpl, db)
	courseCategoryControllerImpl := course_controller.NewCourseCategoryControllerImpl(courseCategoryServiceImpl)
	courseRepositoryImpl := course_repository.NewCourseRepositoryImpl()
	coursePopularServiceImpl := course_service.NewCoursePopularServiceImpl(courseRepositoryImpl, db)
	coursePopularControllerImpl := course_controller.NewCoursePopularControllerImpl(coursePopularServiceImpl)
	courseServiceImpl := course_service.NewCourseServiceImpl(courseRepositoryImpl, db)
	courseControllerImpl := course_controller.NewCourseControllerImpl(courseServiceImpl)
	echoEcho := app.InitServerWithEcho(authenticationControllerImpl, courseCategoryControllerImpl, coursePopularControllerImpl, courseControllerImpl)
	return echoEcho
}

// injector.go:

var authenticationSet = wire.NewSet(account_repository.NewAccountRepositoryImpl, wire.Bind(new(account_repository.AccountRepository), new(*account_repository.AccountRepositoryImpl)), user_repository.NewUserRepositoryImpl, wire.Bind(new(user_repository.UserRepository), new(*user_repository.UserRepositoryImpl)), authentication_service.NewAuthenticationServiceImpl, wire.Bind(new(authentication_service.AuthenticationService), new(*authentication_service.AuthenticationServiceImpl)), authentication_controller.NewAuthenticationControllerImpl, wire.Bind(new(authentication_controller.AuthenticationController), new(*authentication_controller.AuthenticationControllerImpl)))

var courseCategorySet = wire.NewSet(category_repository.NewCategoryRepositoryImpl, wire.Bind(new(category_repository.CategoryRepository), new(*category_repository.CategoryRepositoryImpl)), course_service.NewCourseCategoryServiceImpl, wire.Bind(new(course_service.CourseCategoryService), new(*course_service.CourseCategoryServiceImpl)), course_controller.NewCourseCategoryControllerImpl, wire.Bind(new(course_controller.CourseCategoryController), new(*course_controller.CourseCategoryControllerImpl)))

var popularCourseSet = wire.NewSet(course_service.NewCoursePopularServiceImpl, wire.Bind(new(course_service.CoursePopularService), new(*course_service.CoursePopularServiceImpl)), course_controller.NewCoursePopularControllerImpl, wire.Bind(new(course_controller.CoursePopularController), new(*course_controller.CoursePopularControllerImpl)))

var courseSet = wire.NewSet(course_repository.NewCourseRepositoryImpl, wire.Bind(new(course_repository.CourseRepository), new(*course_repository.CourseRepositoryImpl)), course_service.NewCourseServiceImpl, wire.Bind(new(course_service.CourseService), new(*course_service.CourseServiceImpl)), course_controller.NewCourseControllerImpl, wire.Bind(new(course_controller.CourseController), new(*course_controller.CourseControllerImpl)))
